ggplot(data = Stroke, aes(x = age, fill = stroke)) + geom_boxplot() + ggtitle("Age vs Stroke")
ggplot(data = Stroke, aes(x = age, fill = stroke)) + geom_histogram() + ggtitle("Age vs Stroke")
# hypertension:
ggplot(data = Stroke, aes(x = hypertension, fill = stroke)) + geom_bar() + ggtitle("Hypertension vs Stroke")
# heart disease:
ggplot(data = Stroke, aes(x = heart_disease, fill = stroke)) + geom_bar() + ggtitle("Heart disease vs Stroke")
# ever married:
ggplot(data = Stroke, aes(x = ever_married, fill = stroke)) + geom_bar() + ggtitle("Ever married vs Stroke")
# work type:
ggplot(data = Stroke, aes(x = work_type, fill = stroke)) + geom_bar() + ggtitle("Work type vs Stroke")
# Residence type:
ggplot(data = Stroke, aes(x = Residence_type, fill = stroke)) + geom_bar() + ggtitle("Residence type vs Stroke")
# Average glucose level:
ggplot(data = Stroke, aes(x = avg_glucose_level, fill = stroke)) + geom_boxplot() + ggtitle("Average glucose level vs Stroke")
ggplot(data = Stroke, aes(x = avg_glucose_level, fill = stroke)) + geom_histogram() + ggtitle("Average glucose level vs Stroke")
# BMI:
ggplot(data = Stroke, aes(x = bmi, fill = stroke)) + geom_boxplot() + ggtitle("BMI vs Stroke")
ggplot(data = Stroke, aes(x = bmi, fill = stroke)) + geom_histogram() + ggtitle("BMI vs Stroke")
# Smoking status:
ggplot(data = Stroke, aes(x = smoking_status, fill = stroke)) + geom_bar() + ggtitle("Smoking status vs Stroke")
knitr::opts_chunk$set(echo = TRUE)
#clear all the console
list=ls()
rm(list=ls())
cat("\014")
ls()
Stroke <- read.csv(file.choose())
library(ggplot2)
library(FNN)
library(dummies)
library(e1071)
library (caret)
library(reshape2)
library(dplyr)
library(class)
library(naniar)
require(ellipse)
library(ggplot2)
library(FNN)
library(dummies)
library(e1071)
library (caret)
library(reshape2)
library(dplyr)
library(class)
library(naniar)
require(ellipse)
# Types of variables:
str(Stroke)
# Changing N/A characters in bmi to real NA:
Stroke = replace_with_na(Stroke, replace = list(bmi = "N/A")) # bmi has NA now
# Change bmi from character to numerical variable:
Stroke$bmi <- as.numeric(Stroke$bmi)
Stroke$stroke <- as.factor(Stroke$stroke)
# Change character variables as categorical (factor)
Stroke[,c(2,6:8,11)] <- lapply(Stroke[,c(2,6:8,11)], as.factor)
# Remove id row
Stroke = Stroke[,-1]
str(Stroke)
# Show how many different values there is for each variable
sapply(Stroke, function(x) length(unique(x)))
summary(Stroke)
4861/(4861+249)
# Visualize the data:
# gender:
ggplot(data = Stroke, aes(x = gender, fill = stroke)) + geom_bar() + ggtitle("Gender vs Stroke")
# age:
ggplot(data = Stroke, aes(x = age, fill = stroke)) + geom_boxplot() + ggtitle("Age vs Stroke")
ggplot(data = Stroke, aes(x = age, fill = stroke)) + geom_histogram() + ggtitle("Age vs Stroke")
# hypertension:
ggplot(data = Stroke, aes(x = hypertension, fill = stroke)) + geom_bar() + ggtitle("Hypertension vs Stroke")
# heart disease:
ggplot(data = Stroke, aes(x = heart_disease, fill = stroke)) + geom_bar() + ggtitle("Heart disease vs Stroke")
# ever married:
ggplot(data = Stroke, aes(x = ever_married, fill = stroke)) + geom_bar() + ggtitle("Ever married vs Stroke")
# work type:
ggplot(data = Stroke, aes(x = work_type, fill = stroke)) + geom_bar() + ggtitle("Work type vs Stroke")
# Residence type:
ggplot(data = Stroke, aes(x = Residence_type, fill = stroke)) + geom_bar() + ggtitle("Residence type vs Stroke")
# Average glucose level:
ggplot(data = Stroke, aes(x = avg_glucose_level, fill = stroke)) + geom_boxplot() + ggtitle("Average glucose level vs Stroke")
ggplot(data = Stroke, aes(x = avg_glucose_level, fill = stroke)) + geom_histogram() + ggtitle("Average glucose level vs Stroke")
# BMI:
ggplot(data = Stroke, aes(x = bmi, fill = stroke)) + geom_boxplot() + ggtitle("BMI vs Stroke")
ggplot(data = Stroke, aes(x = bmi, fill = stroke)) + geom_histogram() + ggtitle("BMI vs Stroke")
# Smoking status:
ggplot(data = Stroke, aes(x = smoking_status, fill = stroke)) + geom_bar() + ggtitle("Smoking status vs Stroke")
par(mfrow = c(2, 3))
boxplot(id~hypertension,data = Stroke, main = "Hypertension distribution")
# Remove only row with gender = "Other"
Stroke = Stroke[-3117,]
set.seed(1)
Stroke2 = Stroke
# Put work_type as dummy:
work_type_Dummies <- cbind( Stroke[1:5], dummy(Stroke$work_type, sep = "_"), Stroke[7:11])
names(work_type_Dummies)[6:10] <- c("children","Govt_job", "Never_Worked", "Private", "Self-employed")
work_type_Dummies
Stroke2 <- work_type_Dummies
# Put smoking_status as dummy:
smoking_status_Dummies <- cbind( Stroke2[1:13], dummy(Stroke2$smoking_status, sep = "_"), Stroke2[15])
names(smoking_status_Dummies)[14:17] <- c("formerly_smoked", "never_smoked", "smokes", "unknown")
smoking_status_Dummies
Stroke2 <- smoking_status_Dummies
set.seed(1)
Train <- sample(row.names(Stroke), 0.6*dim(Stroke)[1])
Valid <- setdiff(row.names(Stroke), Train)
Train <- Stroke[Train, ]
Valid <- Stroke[Valid, ]
dim(Train)
dim(Valid)
# The data has been correctly partitioned into 60% (3'065 obs) in T and 40% in V (2'044 obs)
# initialize normalized training and validation sets:
Train_norm <- Train
Valid_norm <- Valid
Stroke_normalized <- Stroke
# use preProcess() from the caret package to normalize the variables age, average_glucose and bmi:
Value.norm <- preProcess(Train[, c(2,8,9)], method= "range")
Train_norm[, c(2,8,9)] <- predict(Value.norm, Train[, c(2,8,9)])
Valid_norm[, c(2,8,9)] <- predict(Value.norm, Valid[, c(2,8,9)])
Stroke_normalized[, c(2,8,9)] <- predict(Value.norm, Stroke[, c(2,8,9)])
# 1) Logistic Regression
logit.reg <- glm(stroke ~., data = Train, family = "binomial")
options(scipen = 999)
summary(logit.reg)
# Graphs for the significant variables
# For age:
mod <- glm(stroke ~ age, data = Train, binomial("logit"))
coefs <- coef(mod)
x_plot <- with(Train, seq(min(age), max(age)+25, length.out = 200))
y_plot <- plogis(coefs[1] + coefs[2] * x_plot)
ggplot(Valid) + geom_point(aes(x=age,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot, y=y_plot), col = "black", data = data.frame(x_plot,y_plot)) + xlab("Age") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# For hypertension:
mod2 <- glm(stroke ~ hypertension, data = Train, binomial("logit"))
coefs2 <- coef(mod2)
x_plot2 <- with(Train, seq(min(hypertension), max(hypertension), length.out = 200))
y_plot2 <- plogis(coefs2[1] + coefs2[2] * x_plot2)
ggplot(Valid) + geom_point(aes(x=hypertension,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot2, y=y_plot2), col = "black", data = data.frame(x_plot2,y_plot2)) + xlab("Hypertension") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# For average glucose level:
mod3 <- glm(stroke ~ avg_glucose_level, data = Train, binomial("logit"))
coefs3 <- coef(mod3)
x_plot3 <- with(Train, seq(min(avg_glucose_level), max(avg_glucose_level)+25, length.out = 200))
y_plot3 <- plogis(coefs3[1] + coefs3[2] * x_plot3)
ggplot(Valid) + geom_point(aes(x=avg_glucose_level,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot3, y=y_plot3), col = "black", data = data.frame(x_plot3,y_plot3)) + xlab("Average glucose") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.8, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.3, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")$table)
4861/(4861+249)
1-0.951272
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.048728, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.048728, 1, 0)), Valid$stroke, positive = "1")$table)
logit.reg <- glm(stroke ~ age + hypertension + avg_glucose_level, data = Train_norm, family = "binomial")
options(scipen = 999)
summary(logit.reg)
pred.lr = predict(logit.reg, Valid_norm[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid_norm$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid_norm$stroke, positive = "1")$table)
?seq
?rep
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")$table)
# 1) Logistic Regression
logit.reg <- glm(stroke ~., data = Train, family = "binomial")
options(scipen = 999)
summary(logit.reg)
# Graphs for the significant variables
# For age:
mod <- glm(stroke ~ age, data = Train, binomial("logit"))
coefs <- coef(mod)
x_plot <- with(Train, seq(min(age), max(age)+25, length.out = 200))
y_plot <- plogis(coefs[1] + coefs[2] * x_plot)
ggplot(Valid) + geom_point(aes(x=age,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot, y=y_plot), col = "black", data = data.frame(x_plot,y_plot)) + xlab("Age") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# For hypertension:
mod2 <- glm(stroke ~ hypertension, data = Train, binomial("logit"))
coefs2 <- coef(mod2)
x_plot2 <- with(Train, seq(min(hypertension), max(hypertension), length.out = 200))
y_plot2 <- plogis(coefs2[1] + coefs2[2] * x_plot2)
ggplot(Valid) + geom_point(aes(x=hypertension,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot2, y=y_plot2), col = "black", data = data.frame(x_plot2,y_plot2)) + xlab("Hypertension") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# For average glucose level:
mod3 <- glm(stroke ~ avg_glucose_level, data = Train, binomial("logit"))
coefs3 <- coef(mod3)
x_plot3 <- with(Train, seq(min(avg_glucose_level), max(avg_glucose_level)+25, length.out = 200))
y_plot3 <- plogis(coefs3[1] + coefs3[2] * x_plot3)
ggplot(Valid) + geom_point(aes(x=avg_glucose_level,y=as.integer(stroke)-1, color=stroke)) + geom_line(aes(x= x_plot3, y=y_plot3), col = "black", data = data.frame(x_plot3,y_plot3)) + xlab("Average glucose") + ylab("Stroke") + scale_x_continuous(breaks = seq(0,250,50)) + theme_classic()
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
4861/(4861+249)
1-0.951272
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")$table)
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(as.factor(ifelse(pred.lr > 0.05, 1, 0)), Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
View(logit.reg)
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
a <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
a <- confusionMatrix(x, Valid$stroke, positive = "1")
View(a)
a <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off), accuracy = rep(0, length(cut_off))))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_line(aes(x=cut_off,y=accuracy), color="green") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
View(metrics.df)
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off), accuracy = rep(0, length(cut_off))))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_line(aes(x=cut_off,y=accuracy), color="green") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_line(aes(x=cut_off,y=accuracy), color="green") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
sensitivity.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_line(aes(x=cut_off,y=accuracy), color="red") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
sensitivity.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity), color="blue") + geom_line(aes(x=cut_off,y=accuracy), color="red") + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[metrics.df$sensitivity == metrics.df$accuracy]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[metrics.df$sensitivity = metrics.df$accuracy]
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity,metrics.df$accuracy)]
?which.max
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity cut-off")
cutoff.plot
cut_off.best = cut_off[which.max(c(metrics.df$sensitivity,metrics.df$accuracy))]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
cut_off.best = cut_off[which.max(metrics.df$sensitivity)]
cut_off.best
?which
?if
?if
?if
??if
??if
??
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = metrics.df$accuracy - metrics.df$sensitivity
cut_off.best = which.min(metrics.df$difference)
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = metrics.df$accuracy - metrics.df$sensitivity
cut_off.best = which.min(metrics.df$difference)
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = which.min(metrics.df$difference)
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = which.min(cut.off[metrics.df$difference])
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut.off[which.min(metrics.df$difference)]
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = cut_off[which.max(metrics.df$sensitivity)], linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut_off[which.min(metrics.df$difference)]
cut_off.best
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.5, 1, 0)), Valid$stroke, positive = "1")$table)
# Confusion matrix
pred.lr = predict(logit.reg, Valid[,-18], type = "response")
confusionMatrix(as.factor(ifelse(pred.lr > 0.04, 1, 0)), Valid$stroke, positive = "1")
fourfoldplot(confusionMatrix(as.factor(ifelse(pred.lr > 0.04, 1, 0)), Valid$stroke, positive = "1")$table)
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.04, linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut_off[which.min(metrics.df$difference)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.045, linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut_off[which.min(metrics.df$difference)]
cut_off.best
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.044, linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut_off[which.min(metrics.df$difference)]
cut_off.best
