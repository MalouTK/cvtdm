ratio_0
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
prp(r.tree)
# Find the best pruned tree:
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
prp(r.tree)
# Find the best pruned tree:
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
ratio_0
ratio_1
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(.04872798, .951272)))
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.04872798, 0.951272)))
ratio_0 + ratio_1
levels(train.df$stroke)
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.951272, 0.04872798)))
0.951272+ 0.04872798
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.951272, 0.04872798)))
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.951272, 0.04872798)))
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", parms = list(prior = c(0.951272, 0.04872798)))
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.951272, 0.04872798)))
ratio_0
table(Stroke$stroke)
ratio_0 = 4861/(4861+249)
ratio_1 = 1 - ratio_0
ratio_1
ratio_0
table(Stroke$stroke)
ratio_0 = 4861/(4861+249)
ratio_1 = 1 - ratio_0
ratio_0
ratio_1
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(0.951272, 0.04872798)))
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
prp(r.tree)
# Find the best pruned tree:
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
printcp(c.tree)
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
View(c.tree)
?printcp
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
prp(r.tree)
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
c.tree$variable.importance
prp(r.tree)
sensitivity(c.tree)
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
View(pruned.ct)
pruned.ct[["terms"]][[3]]$
pruned.ct[["terms"]][[3]]
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pruned.ct$variable.importance
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pruned.ct$variable.importance
#pred.prune.ct = predict(pruned.ct, Valid, type = "class")
pruned.ct$variable.importance
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
c.tree$variable.importance
prp(r.tree)
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
c.tree$variable.importance
prp(r.tree)
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
pred.prune.ct = predict(pruned.ct, Valid, type = "class")
str(Stroke)
str(Valid)
str(pruned.ct)
str(pruned.ct$terms)
str(pruned.ct$variable.importance)
pred.prune.ct = predict(c.tree, Valid, type = "class")
str(Valid$work_type)
Valid$work_type
# Find the best cp:
pred.ct = predict(c.tree, Valid, type = "class")
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
train.df$work_type
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
Stroke$work_type = as.factor(Stroke$work_type)
Stroke$smoking_status = as.factor(Stroke$smoking_status)
train.index = sample(NROW(Stroke), round(NROW(Stroke)*0.6))
train.df = Stroke[train.index,]
valid.df = Stroke[- train.index,]
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
c.tree$variable.importance
prp(r.tree)
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
Stroke.dummy = Stroke
# Put work_type as dummy:
work_type_Dummies <- cbind(Stroke.dummy[1:5], dummy(Stroke.dummy$work_type, sep = "_"), Stroke.dummy[7:11])
names(work_type_Dummies)[6:10] <- c("children","Govt_job", "Never_Worked", "Private", "Self-employed")
work_type_Dummies
Stroke.dummy <- work_type_Dummies
# Put smoking_status as dummy:
smoking_status_Dummies <- cbind( Stroke.dummy[1:13], dummy(Stroke.dummy$smoking_status, sep = "_"), Stroke.dummy[15])
names(smoking_status_Dummies)[14:17] <- c("formerly_smoked", "never_smoked", "smokes", "unknown")
smoking_status_Dummies
Stroke.dummy <- smoking_status_Dummies
train.index = sample(NROW(Stroke.dummy), round(NROW(Stroke.dummy)*0.6))
train.df = Stroke.dummy[train.index,]
valid.df = Stroke.dummy[- train.index,]
View(Stroke.dummy)
# Full-grown tree:
set.seed(1)
r.tree = rpart(stroke ~., data = train.df, method = "class", cp=0, minbucket=1, minsplit = 1, xval =5, parms = list(prior = c(ratio_0, ratio_1)))
length(r.tree$frame$var[r.tree$frame$var == "<leaf>"])
c.tree$variable.importance
prp(r.tree)
# Find the best pruned tree:
printcp(c.tree)
prune_cp.index = which.min(c.tree$cptable[,"xerror"])
prune_cp = c.tree$cptable[prune_cp.index,"CP"]
prune_cp
p <- plotcp(c.tree)
p + abline(v = prune_cp.index, lty = "dashed")
# Pruned tree:
set.seed(1)
pruned.ct <- prune(c.tree, cp = prune_cp, parms = list(prior = c(ratio_0, ratio_1)))
length(pruned.ct$frame$var[pruned.ct$frame$var == "<leaf>"])
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cut_off = seq(0.01,0.99,0.01)
metrics.df <- data.frame(cut_off, sensitivity = rep(0, length(cut_off)), accuracy = rep(0, length(cut_off)))
for (i in 1:length(cut_off)){
x <- as.factor(ifelse(pred.lr >= cut_off[i],1,0))
metrics.df[i, 2] <- confusionMatrix(x, Valid$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, Valid$stroke, positive = "1")$overall[1]
}
cutoff.plot = ggplot(data= metrics.df) + geom_line(aes(x=cut_off,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cut_off,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.044 , linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cut-off")
cutoff.plot
metrics.df$difference = sqrt((metrics.df$accuracy - metrics.df$sensitivity)^2)
cut_off.best = cut_off[which.min(metrics.df$difference)]
cut_off.best
pred.ct
str(pred.ct)
dim(pred.ct)
levels(pred.ct)
sapply(pred.ct, function(x) length(unique(x)))
summary(pred.ct)
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0.001,0.01,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0.001,0.01,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
confusionMatrix(pred.ct, valid.df$stroke, positive = "1")$byClass[1]
confusionMatrix(pred.ct, valid.df$stroke, positive = "1")$overall[1]
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0.001,0.01,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0.001,0.1,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.01,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
x
predict(pruned, valid.df, type = "class")
predict(prune(c.tree, cp = 0.1), valid.df, type = "class")
predict(prune(c.tree, cp = 0.01), valid.df, type = "class")
predict(prune(c.tree, cp = 0.02), valid.df, type = "class")
predict(prune(c.tree, cp = 0.05), valid.df, type = "class")
predict(prune(c.tree, cp = 0.01), valid.df, type = "class")
predict(prune(c.tree, cp = 0.001), valid.df, type = "class")
cp
cut_off
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.01,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
cp
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.01,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
cut_off
cp
View(metrics.df2)
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.01,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.001,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
cp.plot = ggplot(data= metrics.df2) + geom_line(aes(x=cp,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cp,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.044 , linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cp")
cp.plot
metrics.df2$difference = sqrt((metrics.df2$accuracy - metrics.df2$sensitivity)^2)
cp.best = cp[which.min(metrics.df2$difference)]
cp.best
cp
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.001,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
cp.plot = ggplot(data= metrics.df2) + geom_line(aes(x=cp,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cp,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.001 , linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cp")
cp.plot
metrics.df2$difference = sqrt((metrics.df2$accuracy - metrics.df2$sensitivity)^2)
cp.best = cp[which.min(metrics.df2$difference)]
cp.best
confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
x
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.01,0.001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
# Find the best cp:
pred.ct = predict(c.tree, valid.df, type = "class")
cp = seq(0,0.001,0.0001)
metrics.df2 <- data.frame(cp, sensitivity = rep(0, length(cp)), accuracy = rep(0, length(cp)))
for (i in 1:length(cp)){
pruned <- prune(c.tree, cp = cp)
x <- predict(pruned, valid.df, type = "class")
metrics.df2[i, 2] <- confusionMatrix(x, valid.df$stroke, positive = "1")$byClass[1]
metrics.df2[i, 3] <- confusionMatrix(x, valid.df$stroke, positive = "1")$overall[1]
}
cp.plot = ggplot(data= metrics.df2) + geom_line(aes(x=cp,y=sensitivity, color="Sensitivity")) + geom_line(aes(x=cp,y=accuracy, color = "Accuracy")) + geom_vline(xintercept = 0.001 , linetype="dashed") + theme_classic() + ggtitle("Sensitivity and Accuracy cp")
cp.plot
metrics.df2$difference = sqrt((metrics.df2$accuracy - metrics.df2$sensitivity)^2)
cp.best = cp[which.min(metrics.df2$difference)]
cp.best
